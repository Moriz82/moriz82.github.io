name: Update HTB Stats

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"  # run every 12h

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up jq
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch HTB stats
        env:
          HTB_APPKEY: ${{ secrets.HTB_APPKEY }}
        run: |
          set -euo pipefail

          auth="Authorization: Bearer ${HTB_APPKEY}"
          acc="Accept: application/json"

          # Fetch all pages and flatten into array of machines
          fetch_pages_to_array () {
            local url="$1"
            local tmpfile
            tmpfile="$(mktemp)"
            echo "[]" > "$tmpfile"

            while [[ -n "$url" ]]; do
              curl -sS -H "$auth" -H "$acc" "$url" \
              | jq -s '.[0]' > "$tmpfile.page"

              # append this page
              jq -s '.[0] + [.[1]]' "$tmpfile" "$tmpfile.page" > "$tmpfile.new"
              mv "$tmpfile.new" "$tmpfile"

              url="$(jq -r '.links.next // empty' "$tmpfile.page")"
            done

            # flatten to just the machine objects
            jq 'map(.data // .message // []) | add' "$tmpfile"
            rm -f "$tmpfile" "$tmpfile.page"
          }

          # --- (A) COUNTS ---
          active_list="$(fetch_pages_to_array "https://labs.hackthebox.com/api/v4/machine/paginated")"
          retired_list="$(fetch_pages_to_array "https://labs.hackthebox.com/api/v4/machine/list/retired/paginated")"

          all_unique="$(jq -n \
            --slurpfile a <(echo "$active_list") \
            --slurpfile r <(echo "$retired_list") \
            '($a[0] + $r[0]) | unique_by(.id)'
          )"

          owned_counts="$(echo "$all_unique" | jq '
            map(select(.authUserInUserOwns == true or .authUserInRootOwns == true))
          ')"

          difficulties="$(echo "$owned_counts" | jq '
            group_by(.difficultyText)
            | map({label: (.[0].difficultyText // "Unknown"), value: length})
            | sort_by(.label)
          ')"

          # --- (B) RECENT BOXES ---
          owned_active="$(echo "$active_list" | jq '
            map(select(.authUserInUserOwns == true or .authUserInRootOwns == true))
          ')"

          boxes="$(echo "$owned_active" | jq '
            map({
              name: .name,
              difficulty: .difficultyText,
              date: (.authUserOwnsDate // .release // ""),
              summary: (.os // "")
            })
            | sort_by(.date) | reverse
            | unique_by(.name)
            | .[0:3]
          ')"

          mkdir -p data
          jq -n --argjson d "$difficulties" --argjson b "$boxes" \
            '{difficulties: $d, boxes: $b}' > data/htb.json

      - name: Commit updated JSON
        run: |
          git config user.name "moriz82"
          git config user.email "moriz82t@example.com"
          git add data/htb.json
          git commit -m "action: update HTB stats" || echo "No changes to commit"
          git push
